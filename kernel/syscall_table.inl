#ifdef SYSCALL_ENTRY_COMPLETED

#include <minios/types.h>
#include <macro_helper.h>

#define SYSCALL_ENTRY(name) [MH_CONCAT(NR_, name)] = (syscall_entry_t)(void*)MH_CONCAT(sys_, name)

syscall_entry_t syscall_table[NR_SYSCALLS] = {
    SYSCALL_ENTRY(getticks),
    SYSCALL_ENTRY(get_time),
    SYSCALL_ENTRY(getpid),
    SYSCALL_ENTRY(getpid_by_name),
    SYSCALL_ENTRY(total_mem_size),
    SYSCALL_ENTRY(malloc_4k),
    SYSCALL_ENTRY(free_4k),
    SYSCALL_ENTRY(fork),
    SYSCALL_ENTRY(exit),
    SYSCALL_ENTRY(execve),
    SYSCALL_ENTRY(wait),
    SYSCALL_ENTRY(sleep),
    SYSCALL_ENTRY(yield),
    SYSCALL_ENTRY(signal),
    SYSCALL_ENTRY(sigreturn),
    SYSCALL_ENTRY(sigsend),
    SYSCALL_ENTRY(open),
    SYSCALL_ENTRY(close),
    SYSCALL_ENTRY(read),
    SYSCALL_ENTRY(write),
    SYSCALL_ENTRY(unlink),
    SYSCALL_ENTRY(lseek),
    SYSCALL_ENTRY(mkdir),
    SYSCALL_ENTRY(opendir),
    SYSCALL_ENTRY(closedir),
    SYSCALL_ENTRY(readdir),
    SYSCALL_ENTRY(rmdir),
    SYSCALL_ENTRY(chdir),
    SYSCALL_ENTRY(getcwd),
    SYSCALL_ENTRY(mount),
    SYSCALL_ENTRY(umount),
    SYSCALL_ENTRY(stat),
    SYSCALL_ENTRY(nice),
    SYSCALL_ENTRY(rt_prio),
    SYSCALL_ENTRY(set_rt),
    SYSCALL_ENTRY(get_proc_msg),
    SYSCALL_ENTRY(ftok),
    SYSCALL_ENTRY(msgctl),
    SYSCALL_ENTRY(msgget),
    SYSCALL_ENTRY(msgsnd),
    SYSCALL_ENTRY(msgrcv),
    SYSCALL_ENTRY(shmctl),
    SYSCALL_ENTRY(shmget),
    SYSCALL_ENTRY(shmat),
    SYSCALL_ENTRY(shmdt),
    SYSCALL_ENTRY(shmcpy),
    SYSCALL_ENTRY(pthread_self),
    SYSCALL_ENTRY(pthread_create),
    SYSCALL_ENTRY(pthread_join),
    SYSCALL_ENTRY(pthread_exit),
    SYSCALL_ENTRY(pthread_cond_init),
    SYSCALL_ENTRY(pthread_cond_destroy),
    SYSCALL_ENTRY(pthread_cond_signal),
    SYSCALL_ENTRY(pthread_cond_broadcast),
    SYSCALL_ENTRY(pthread_cond_wait),
    SYSCALL_ENTRY(pthread_cond_timewait),
    SYSCALL_ENTRY(pthread_mutex_init),
    SYSCALL_ENTRY(pthread_mutex_destroy),
    SYSCALL_ENTRY(pthread_mutex_lock),
    SYSCALL_ENTRY(pthread_mutex_trylock),
    SYSCALL_ENTRY(pthread_mutex_unlock),
};

#endif
